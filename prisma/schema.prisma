// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

model Make {
    id      Int       @id @default(autoincrement())
    name    String    @unique
    models  Model[]
    Listing Listing[]
}

model Model {
    id       Int       @id @default(autoincrement())
    makeId   Int
    name     String    @unique
    makes    Make      @relation(fields: [makeId], references: [id])
    listings Listing[]
}

model Image {
    id        Int     @id @default(autoincrement())
    url       String
    listingId String
    listing   Listing @relation(fields: [listingId], references: [id])
}

model Transmission {
    id        Int       @id @default(autoincrement())
    name      String
    listingId String
    listings  Listing[]
}

model BodyStyle {
    id        Int       @id @default(autoincrement())
    name      String
    listingId String
    listings  Listing[]
}

model Listing {
    id               String   @id @default(cuid())
    makeId           Int
    modelId          Int
    transmissionId   Int
    bodyStyleId      Int
    title            String   @default("Title")
    year             Int
    description      String
    mileage          Float
    vin              String
    titleStatus      String
    location         String
    engine           String
    transmissionDesc String
    driveTrain       String
    exteriorColor    String
    interiorColor    String
    sellerType       String
    isReserve        Boolean
    highlights       String
    images           Image[]
    startingBid      Float
    currentBid       Float
    startTime        DateTime @default(now())
    endTime          DateTime
    status           String
    createdById      String

    createdBy    User         @relation(fields: [createdById], references: [id])
    transmission Transmission @relation(fields: [transmissionId], references: [id])
    bodyStyle    BodyStyle    @relation(fields: [bodyStyleId], references: [id])
    make         Make         @relation(fields: [makeId], references: [id])
    model        Model        @relation(fields: [modelId], references: [id])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    listings      Listing[]
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
